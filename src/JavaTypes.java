import java.math.BigDecimal;

/**
 * Типы данных Java
 */
public class JavaTypes {

	public static void main(String[] args) {
		// Целочисленные типы данных
		// Диапозоны допустимых значений целочисленных типов не зависят от машины, на
		// которой выполняется программа! В Java отсутствуют беззнаковые (unsigned)
		// разновидности челочисленных типов.
		byte b; // 1 byte от -128 до 127
		short s; // 2 byte от -32768 до 32767
		int i; // 4 byte от -2147483648 до 2147483647 (т.е. больше 2 млрд.)
		long l; // 8 byte от -9223372036854775808 до -9223372036854775807

		// Числовые типы данных с плавоющей точкой
		float f; // 4 byte приблизительно +/- 3.40282347E+38F (6-7 значащих десятичных цифр)
		double d; // 8 byte приблизительно +/- 1.7976931348623157E+308F (15 значащих десятичных
					// цифр)

		// Тип данны char
		char c;

		// Тип данных boolean
		boolean bool;

		System.out.println("Целые типы данных");

		// Длинные целые числа указываются с суфиксом L
		l = 4000000000L;
		System.out.println("l = " + l);

		// Воcьмеричные числа записываются с префиксом 0 (ноль)
		i = 010; // 010 - это десятичное число 8 в восьмиричной форме.
					// Такая запись иногда приводит к недоразумениям, поэтому пользоваться
					// восьмиричными числами не рекомендуется
		System.out.println("i = " + i);

		// Числа в двоичной форме указываются с префиксом 0b или 0B
		b = 0b1001; // десятичное число 9 в бинарном виде
		System.out.println("b = " + b);
		// Для повышения удобочитаемости больших чисел, для разделения разрядов можно
		// добавлять подчеркивания (компилятор Java просто их удаляет)
		s = 0b111_0100_0010_0000;
		l = 4_000_000_000L;
		System.out.println("s = " + s);
		System.out.println("l = " + l);

		System.out.println("\nТипы данных с плавающей точкой");

		// Числовые типы double являются более предпочтительы чем типы float.
		// Пользоваться типом float следует пользоваться лишь с библиотекой, где они
		// непременно требуются, или в том случае, если такие значения приходится
		// хранить в большом количестве.

		// Числовые значения типа float указываются с суфиксом F
		f = 3.1415926535_8979323846_2643383279F;
		System.out.println("f = " + f);
		// Числовые значения указываемые без суфикса F всегда рассматриваются как
		// относящиеся к типу double
		System.out.println("float:  " + 3.1415926535_8979323846_2643383279F);
		System.out.println("double: " + 3.1415926535_8979323846_2643383279);
		// Для числового представления значения типа double можно (но не обязательно)
		// использовать суфикс D
		d = 3.1415926535_8979323846_2643383279D;
		System.out.println("d = " + d);

		// Числовые литералы с плавающей точкой могут быть представлены в
		// шестнадцатиричнойформе.
		// Например, числовое значение 0.125 равно 2 в степени -3 можно записать как
		// 0x1.0p-3. В шестнадцатеричной форме для выделения показателя степени служит
		// обозначение p, не e, поскольку e - шестнадцатеричная цифра. Обратите внимание
		// на то что, дробная часть записывается в шестнадцатиричной форме, а показатель
		// степени - в десятичной, тогда как основание показателя степени - 2, но не 10.
		System.out.println("0x1.0p-3 = " + 0x1.0p-3);

		// В Java все операции над числами с плавающей точкой производятся по стандарту
		// IEEE 754. Поэтому имеется три специальных значения с плавающей точкой:
		// - Положительная бесконечность
		// - Отрицательная бесконечность
		// - Не число (NaN)
		// Результат деления положительного вещественного числа на 0 будет положительная
		// бесконечность
		System.out.println("Потожительное число / 0 = " + (123456789.123456789 / 0));
		// Результат деления отрицательного вещественного числа на 0 будет отрицательная
		// бесконечность
		System.out.println("Потожительное число / 0 = " + (-123456789.123456789 / 0));
		// Результат деления 0.0 на 0 будет нечисловой
		System.out.println("(0.0 / 0) = " + (0.0 / 0));
		// В Java существуют константы Double.POSITIVE_INFINITY,
		// Double.NEGATIVE_INFINITY и Double.NaN (а так же соответствующие константы
		// типа float). Их можно проверять что соответствующий результат им равен.
		d = (0.0 / 0);
		// Т.к. эти величины не являются числами то так нельзя их проверять
		if (d == Double.NaN) { // Никогда не будет выполнено
			System.out.println("1. NaN");
		}
		// Следует проверять так
		if (Double.isNaN(d)) { // Проверка является ли значение переменной не числом
			System.out.println("2. NaN");
		}

		// Числа с плавающей точкой нельзя использовать в финансовых расчетах, где
		// ошибки округления не допустимы.Например результат (2.0 - 1.1) будет
		// 0.8999999999999999, а не 0.9, как было бы логично предположить. Эти ошибки
		// связаны с внутренним двоичным представлением чисел.
		System.out.println("(2.0 - 1.1) = " + (2.0 - 1.1));
		// Если требуется исключить ошибки округления, то следует воспользоваться
		// классом BigDecimal
		BigDecimal bd20 = new BigDecimal(2.0D);
		BigDecimal bd11 = new BigDecimal(1.1D);
		System.out.println("BigDecimal: " + bd20.subtract(bd11));

		System.out.println("\nТип данных boolean");
		bool = true; // или false
		if (bool) {
			System.out.println("Истина.");
		} else {
			System.out.println("Лож.");
		}

		System.out.println("\nТип данных char");
		c = 'A';
		System.out.println("Символ : " + c);
		// Кодовые единицы Unicode могут быть представлены шестнадцатеричными числами в
		// пределах от \u0000 до \uFFFF
		System.out.println("Символ Unicode \\u2122 : " + '\u2122');
		// Управляющие последовательности символов в Unicode обрабатываются перед
		// синтаксическим анализатором кода. Поэтому нужно быть осторожным в их
		// использовании в комментариях. Например, \u00A0 (знак новой строки) вызовит
		// синтаксическую ошибку.
		// Комментарий (без маскирования слеша):
		// войти в каталог c:\\users
		// вызовит синтаксическую ошибку, т.к. user не является шестнадцатиричным числом
		// Тип char может принимать несколько управляющих символов:
		// \b (в Unicode \\u0008) Возврат на одну позицию
		// \t (\\u0009) Табуляция
		// \n (\\u000a) Переход на новую строку
		// \r (\\u000d) Возврат каретки
		// \" (\\u0022) Двойная кавычка
		// \' (\\u0027) Одинарная кавычка
		// \\ (\\u005c) Обратная косая черта

		System.out.println();

		String s1 = "1234567890";
		System.out.println(s1.substring(2, 5));
		System.out.println(s1.replace("345", "000"));

	}

}
